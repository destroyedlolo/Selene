#!./Selene
-- Multi valued timed Collection example

col = SelAverageCollection.Create(5,7,3, 2)

for i=1,4 do
	col:Push({i, 4-i}, os.time()+i)
end
col:dump()

print "\n\nAdditional values that eject first ones"
print "---------------------------------------\n"

for i=5,7 do
	col:Push({i, 4-i})
end
col:dump()

print "\n\nReplace with randoms"
print "--------------------\n"

for i=1,5 do
	col:Push( {math.random(0,1000), math.random(0,10)} )
end
col:dump()

print("\nImmediate Min")
print("---\n")
local min, max = col:MinMaxI()

for i=1,#min do
	print(i, min[i])
end

print("\nImmediate Max")
print("---\n")

for i=1,#max do
	print(i, max[i])
end

print("\nAverage Min")
print("---\n")
local min, max = col:MinMaxA()

for i=1,#min do
	print(i, min[i])
end

print("\nAverage Max")
print("---\n")

for i=1,#max do
	print(i, max[i])
end

print("\niData")
print("-----\n")

for d in col:iData() do
	for i=1,#d do
		print(i, d[i])
	end
end

print("\n\naData()")
print("-------\n")

for d in col:aData() do
	for i=1,#d do
		print(i, d[i])
	end
end

print "\n\nSave data"
print("----------\n")

col:Save('/tmp/tst.dt')

print("\n\nClearing the collection")
print("-----------------------\n")

col:Clear()
col:dump()

print "\n\nLoad data"
print("----------\n")

col:Load('/tmp/tst.dt')
col:dump()


--[[

print "\n\nSave data"
print "-----------\n"

col:Save('/tmp/tst.dt')

print "\n\nReload data"
print "-----------\n"

col2 = SelTimedCollection.Create(5,2)
local _,err = col2:Load('/tmp/tst.dt')
if err then
	error( err )
end

print "\n Initial ----------"
col:dump()

print "\n restored ----------"
col2:dump()

print("\n\nClearing the collection")
print("-----------------------\n")

col:Clear()
col:dump()

print("\n\nInitial load")
print("------------\n")

for i=1,2 do
	col:Push({i, 10+i}, os.time()+i)
end
col:dump()

print "\n\nSave data (incomplet)"
print "-----------\n"

col:Save('/tmp/tst.dt')

print "\n\nReload data"
print "-----------\n"

col2:Clear()
local _,err = col2:Load('/tmp/tst.dt')
if err then
	error( err )
end

print "\n Initial ----------"
col:dump()

print "\n restored ----------"
col2:dump()

print("\n\nEject the 1st value")
print("-------------------\n")

for i=5,8 do
	col:Push( {math.random(0,1000), math.random(0,1000)}, os.time() + math.random(0,1000000) - 500000 )
end
col:dump()
]]
