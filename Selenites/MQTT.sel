#!./Selene

-- Simple MQTT receiving test

Selene.Use("SelMQTT")
Selene.Use("SelSharedVar")
Selene.LetsGo()	-- ensure late building dependencies

unpack = unpack or table.unpack
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

--[[
-- Errors code test

print 'Error code handling test'
print '------------------------'

code = SelMQTT.ErrConst("MQTTCLIENT_DISCONNECTED")
print(code, SelMQTT.StrError(code))
]]

-- Callbacks
-- Callbacks are launched in dedicated threads. Consequently, they
-- can't access to other object (variables, even function).
-- Exchange have to be done using SelShared* Selene objects
--
-- Signature is :
-- 	-> 1 : topic (string)
-- 	-> 2 : payload (string) - only text based one
-- 	-> 3 : retrained (boolean) - true only if it not a "fresh" message but one
-- 		that has been kept by the server
-- 	-> 4 : in case of QoS1, true means it's a resent of a message that hasn't
-- 		been acknowledged
--	<- true : trigger is put in the Todo list 
--		(consequently both the function and the trigger are launched)
--	   false : don't launch the trigger.

function handle_tata( topic, msg )
	SelLog.Log('D', "Lua received t:'" .. topic .."' m:'".. msg .."'")
	SelSharedVar.Set('tata', msg)	-- use SelShared to make the data available to other code
	return true	-- trigger to be scheduled
end

function handle_truc( topic, msg, retained, dupplicate )
	SelLog.Log('D', "Lua received t:'" .. topic .."' m:'".. msg  .."' : " .. tostring(retained) .. '/' .. tostring(dupplicate) )
	SelSharedVar.Set('tata', msg)
	return false -- trigger not launched
end


-- Update functions
function update_tata()
	SelLog.Log('I', "Trigger for Tata :".. SelSharedVar.Get('tata'))
end

function update_toto()
	SelLog.Log('I', "Trigger for toto : ".. SelSharedVar.Get('toto'))
end

print '\nTesting broker connection'
print '--------------------------'

-- Connection, subscription and finally waiting for messages
Brk, err = SelMQTT.Connect( "tcp://torchwood.local:1883", { reliable=false  } )
if not Brk then
	SelLog.Log('F', err)
	return
end

print '\nTest Publishing to "test" topic'
print '-------------------------------'

Brk:Publish("test","ca marche")

print '\nSubscribing'
print '------------'

--[[ /*AF SelSharedFunction*/
local truc = SelShared.RegisterSharedFunction( handle_truc, "handle_truc" )

_, err = Brk:Subscribe( { 
	{ topic = "tata/+/truc", func=handle_tata, trigger=update_tata, trigger_once=false, qos=SelMQTT.QoSConst("QoS0") },
	{ topic = "truc", func=truc },
	{ topic = "toto", trigger=update_toto, trigger_once=true } 
} )
]]

_, err = Brk:Subscribe( { 
	{ topic = "tata/+/truc", func=handle_tata, trigger=update_tata, trigger_once=false, qos=SelMQTT.QoSConst("QoS0") },
	{ topic = "truc", func=handle_truc },
	{ topic = "toto", trigger=update_toto, trigger_once=true } 
} )

if err then
	SelLog.Log('F', err)
	return
end

print '\nWaiting for data'
print '-----------------'

while true do
	local rt = table.pack( Selene.WaitFor() )

	for _,ret in ipairs(rt) do	-- An imediate function to execute ?
		if type(ret) == 'function' then
			ret()
		elseif SelError.isSelError(ret) then -- Technical error ?
			print("Error ".. ret:getLevel() ..":", ret:getMessage())
		else	-- Unknown/unsupported action (dependency missing ?)
			print("Don't know what to do with", type(ret))
		end
	end
end
