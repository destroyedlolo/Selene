#!./Selene

-- Simple MQTT receiving test

unpack = unpack or table.unpack
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

--[[
-- Errors code test

print 'Error code handling test'
print '------------------------'

code = SelMQTT.ErrConst("MQTTCLIENT_DISCONNECTED")
print(code, SelMQTT.StrError(code))
--]]

-- Callbacks
function handle_tata( topic, msg )
	print("Lua received t:'" .. topic .."' m:'".. msg .."'")
	SelShared.Set('tata', msg)
	return true	-- trigger to be scheduled
end

function handle_truc( topic, msg )
	print("Lua received t:'" .. topic .."' m:'".. msg .."'")
	SelShared.Set('tata', msg)
	return false -- trigger not launched
end


-- Update functions
function update_tata()
	print("Trigger for Tata :", SelShared.Get('tata'))
end

function update_toto()
	print("Trigger for toto :", SelShared.Get('toto'))
end

print '\nTesting broker connection'
print '--------------------------'

-- Connection, subscription and finally waiting for messages
-- Brk, err = SelMQTT.Connect( "tcp://localhost:1883", { reliable=false  } )
Brk, err = SelMQTT.Connect( "tcp://bpi.chez.moi:1883", { reliable=false  } )
if not Brk then
	print( err )
	return
end

print '\nSubscribing'
print '------------'

local truc = SelShared.RegisterSharedFunction( handle_truc, "handle_truc" )

_, err = Brk:Subscribe( { 
	{ topic = "tata/+/truc", func=handle_tata, trigger=update_tata, trigger_once=false, qos=SelMQTT.QoSConst("QoS0") },
	{ topic = "truc", func=truc },
	{ topic = "toto", trigger=update_toto, trigger_once=true } 
} )
if err then
	print( err )
	return
end

print '\nWaiting for data'
print '-----------------'

while true do
	local rt = table.pack( Selene.WaitFor() )
	for _,ret in ipairs(rt) do
		if type(ret) == 'function' then
			ret()
		end
	end
end
	
