#!./Selene 
-- Example of a complex WaitFor() events handling, 
-- with all kind of supported event

Selene.Use("SelMQTT")		-- MQTT
Selene.Use("SelSharedVar")	-- shared variable needed by MQTT
Selene.Use("SelTimer")		-- Timer

Selene.LetsGo()	-- ensure late building dependencies


-- Callbacks
function bip_timer()
	SelLog.Log('D', 'bip')
end

function bip_timer2()
	SelLog.Log('D', 'bip2')
end

function handle_tata( topic, msg )
	SelLog.Log('D', "Lua received t:'" .. topic .."' m:'".. msg .."'")
	SelSharedVar.Set('tata', msg)	-- use SelShared to make the data available to other code
	return true	-- trigger to be scheduled
end

function handle_toto( topic, msg )
	SelLog.Log('D', "Lua received t:'" .. topic .."' m:'".. msg .."'")
	SelSharedVar.Set('toto', msg)	-- use SelShared to make the data available to other code
	return true	-- trigger to be scheduled
end

-- Update functions
function update_tata()
	SelLog.Log('D', "update_tata()")
end

function update_toto()
	SelLog.Log('D', "update_toto() - toto='".. SelSharedVar.Get("toto") .."'" )
end

-- Connection, subscription and finally waiting for messages
Brk, err = SelMQTT.Connect( "tcp://torchwood.local:1883", { reliable=false  } )
if not Brk then
	SelLog.Log('F', err)
	return
end

_, err = Brk:Subscribe( { 
	{ topic = "tata/+/truc", func=handle_tata, trigger=update_tata, trigger_once=false, qos=SelMQTT.QoSConst("QoS0") },
	{ topic = "toto",func=handle_toto, trigger=update_toto, trigger_once=true } 
} )
if err then
	SelLog.Log('F', err)
	return
end

-- Create a timer with immediate function
itmr, err = SelTimer.Create {Name="Immediate", when=3.5, interval=2, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), ifunc=bip_timer }
if err then
	SelLog.Log('F', err)
	return
end

-- Another one with a task
ttmr, err = SelTimer.Create {Name="Task", when=7, interval=3.5, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), task=bip_timer2, once=true }
if err then
	SelLog.Log('F', err)
	return
end

-- Wait for events
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

while true do
	local rt = table.pack( Selene.WaitFor(itmr, ttmr, io.stdin) )

	for _,ret in ipairs(rt) do	-- An imediate function to execute ?
		if type(ret) == 'function' then
			ret()
		elseif ret == io.stdin then
			SelLog.Log('I', 'reading from stdin')
			local l = io.read()
			if l == nil then break end
		elseif SelError.isSelError(ret) then -- Technical error ?
			SelLog.Log('E', "Error ".. ret:getLevel() ..": ".. ret:getMessage())
		else	-- Unknown/unsupported action (dependency missing ?)
			SelLog.Log('E', "Don't know what to do with ".. type(ret))
		end
	end
end
