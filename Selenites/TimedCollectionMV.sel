#!./Selene
-- Multi valued timed Collection example

Selene.Use("SelTimedCollection")
Selene.Use("SelMultitasking")	-- for detached tasks test
Selene.LetsGo()	-- ensure late building dependencies

-- Create a collection for 5x2 records
col = SelTimedCollection.Create("timed", 5,2)

-- Pushing to a multiple valued collection is done through a table
for i=1,4 do
	col:Push({i, 4-i}, os.time()+i)
end
col:dump()

print "\n\nAdditional values that eject first ones"
print "---------------------------------------\n"

for i=5,7 do
	col:Push({i, 4-i})
end
col:dump()

print "\n\nReplace with randoms"
print "--------------------\n"

for i=1,5 do
	col:Push( {math.random(0,1000), math.random(0,10)}, os.time() + math.random(0,1000000) - 500000 )
end
col:dump()

print("\nMin")
print("---\n")
local min, max = col:MinMax()

for i=1,#min do
	print(i, min[i])
end

print("\nMax")
print("---\n")

for i=1,#max do
	print(i, max[i])
end

print("\niData")
print("-----\n")

for d in col:iData() do
	for i=1,#d do
		print(i, d[i])
	end
end

print "\n\nSave data"
print "-----------\n"

col:Save('/tmp/tst.dt')

print "\n\nReload data"
print "-----------\n"

col2 = SelTimedCollection.Create("sec", 5,2)
local _,err = col2:Load('/tmp/tst.dt')
if err then
	error( err )
end

print "\n Initial ----------"
col:dump()

print "\n restored ----------"
col2:dump()

print("\n\nClearing the collection")
print("-----------------------\n")

col:Clear()
col:dump()

print("\n\nInitial load")
print("------------\n")

for i=1,2 do
	col:Push({i, 10+i}, os.time()+i)
end
col:dump()

print "\n\nSave data (incomplet)"
print "-----------\n"

col:Save('/tmp/tst.dt')

print "\n\nReload data"
print "-----------\n"

col2:Clear()
local _,err = col2:Load('/tmp/tst.dt')
if err then
	error( err )
end

print "\n Initial ----------"
col:dump()

print "\n restored ----------"
col2:dump()

print("\n\nEject the 1st value")
print("-------------------\n")

for i=5,8 do
	col:Push( {math.random(0,1000), math.random(0,1000)}, os.time() + math.random(0,1000000) - 500000 )
end
col:dump()

print "\n\nTest multitasking"
print "-----------------\n"

	-- Test multitasking
-- This detached function is able find the collection and add a value
function test()
	local detcol = SelTimedCollection.Find("timed")
	if detcol then
		SelLog.Log('I', "Pushing PI from detached function")
		detcol:Push {math.pi, 3.14}
	else
		SelLog.Log('E', "Find() failed in detached function")
	end
end

Selene.Detach(test)
Selene.Sleep(0.25) -- Let some time for the function to run

col:dump()
