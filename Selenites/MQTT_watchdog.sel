#!./Selene
-- Test MQTT watchdog

unpack = unpack or table.unpack
if not table.pack then
	function table.pack (...)
		return {n=select('#',...); ...}
	end
end

-- Watchdog exhausted
-- Note : wdtimer:Get() will also return 0 if the watchdog is exhausted
function exhausted()
	print("No message received after 3 seconds")
end

-- Create the watchdog's timer
wdtimer, err = SelTimer.Create { when=3, ifunc=exhausted, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC") }

if err then
	print(err)
	return
end

-- Callback if we get disconnected
-- CAUTION, this function is called outside the main function
function disconnected( cause )
	print("Broker connection's lost due to : ".. cause);
end

-- Broker's callback
function msgreceived()
	print("Received '".. SelShared.Get("toto") .."' from topic '/toto'");
	return true
end

-- Connection and subscription
Brk, err = SelMQTT.Connect( "tcp://localhost:1883", { reliable=false, OnDisconnect=disconnected  } )
if not Brk then
	print( err )
	return
end

_, err = Brk:Subscribe( { 
	{ topic = "toto", trigger=msgreceived, watchdog=wdtimer }
} )
if err then
	print( err )
	return
end

-- waiting loop
while true do
	local rt = table.pack( Selene.WaitFor(wdtimer) )
	for _,ret in ipairs(rt) do
		if type(ret) == 'function' then
			ret()
		end
	end
end

