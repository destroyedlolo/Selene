-- Simple MQTT receiving test that launch a referenced function
-- Have a look on SharedFunction example for some explanation

Selene.Use("SelSharedRef")
Selene.Use("SelMQTT")
Selene.LetsGo()	-- ensure late building dependencies

--	Compatibility with newer Lua
unpack = unpack or table.unpack
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

print '\nReferenting'
print '------------'

function tst()
	print "In my Referenced function"
end

local ref = Selene.RegisterFunction(tst)	-- get function reference
SelSharedRef.Register( ref, "Referenced Function" ) -- register it

print '\nBroker connection'
print '------------------'

-- Connection, subscription and finally waiting for messages
Brk, err = SelMQTT.Connect( "tcp://localhost:1883", { reliable=false  } )
if not Brk then
	print( err )
	return
end

print '\nSubscribing'
print '------------'

-- Immediate function that will push "Referenced Function" on the todo list
-- It's only to demonstrate the usage of SelSharedRef as, obviously, it's 
-- exactly what a trigger is doing.
function toto(topic, message)
	print("Immediate function :", message)
	local ref = SelSharedRef.Find("Referenced Function") -- Look for the reference
	Selene.PushTaskByRef(ref)
	return true
end

-- Trigger called directly by the subscription
function trig_toto()
	print("Trigger toto")
end

_, err = Brk:Subscribe( { 
	{ topic = "toto", func=toto, trigger=trig_toto, trigger_once=true } 
} )
if err then
	print( err )
	return
end

print "Incomming topic : 'toto'"

print '\nWaiting for data'
print '-----------------'

while true do
	local rt = table.pack( Selene.WaitFor() )

	for _,ret in ipairs(rt) do	-- An imediate function to execute ?
		if type(ret) == 'function' then
			ret()
		elseif SelError.isSelError(ret) then -- Technical error ?
			SelLog.Log('E', "Error ".. ret:getLevel() ..": ".. ret:getMessage())
		else	-- Unknown/unsupported action (dependency missing ?)
			SelLog.Log('E', "Don't know what to do with ".. type(ret))
		end
	end
end
