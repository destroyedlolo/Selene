#!./Selene
-- Timed windowed Collection example

Selene.Use("SelTimedWindowCollection")
Selene.Use("SelMultitasking")	-- for detached tasks test
Selene.LetsGo()	-- ensure late building dependencies

-- create a named collection of 5 records,
-- each of them grouping by 7 seconds
col = SelTimedWindowCollection.Create("mycol", 5,7)

print "Test with an incomplete collection"
print "----------------------------------"
for i=1,7 do
	io.write(i .. '\r'); io.flush()
	col:Push(i, os.time())
	Selene.Sleep(2)
end
col:dump()
print("MinMax", col:MinMax())
print("DiffMinMax", col:DiffMinMax())
print("size: ".. col:GetSize(), "How Many: ".. col:HowMany(), "Grp : ".. col:GetGrouping())

-- walk through the collection using an iterator
print "Iterator test"
print "-------------"
for di,da,dv, t in col:iData() do print(di, da, dv, os.date("%c",t) ) end

print "Saving ..."
print "----------"
col:Save('/tmp/tst.dt')

-- Reload data to an unnamed collection
print "Loading ..."
print "-----------"
col2 = SelTimedWindowCollection.Create(nil,5,7)
col2:Load('/tmp/tst.dt')
col2:dump()

print("Clearing the collection")
print("-----------------------")

col:Clear()
col:dump()

print "Test with an incomplete collection"
print "---------------------------------"
for i=1,7 do
	io.write(i .. '\r'); io.flush()
	col:Push(i, os.time())
	Selene.Sleep(2)
end
col:dump()
print( "MinMax", col:MinMax() )
print( "DiffMinMax", col:DiffMinMax() )

print "Test with a full collection"
print "---------------------------"
for i=8,25 do
	io.write(i .. '\r'); io.flush()
	col:Push(i)
	Selene.Sleep(2)
end
col:dump()
print( "MinMax", col:MinMax() )
print( "DiffMinMax", col:DiffMinMax() )
print("size: ".. col:GetSize(), "How Many: ".. col:HowMany(), "Grp : ".. col:GetGrouping())

	-- Test multitasking
-- This detached function is able find the collection and walk through

function test()
	print "In detached function, find out the collection"
	print "---------------------------------------------"

	local col3 = SelTimedWindowCollection.Find("mycol")
	col3:dump()

	print "In detached function, iterator test"
	print "-----------------------------------"
	for di,da,dv, t in col3:iData() do print(di, da, dv, os.date("%c",t) ) end
end

Selene.Detach(test)
Selene.Sleep(0.25) -- Let some time for the function to run

