#!./Selene 
-- Forward messages from 'brokerSrc' to 'brokerDst'
-- Topics are read from command line arguments

-- Obviously, it is not intended to replace broker's bridging
-- (and many MQTT features are missing like QoS > 0, authentications, ...)
-- It was made for testing purposes : I need to forward messages
-- from my production network to my test one with the capability
-- to stop transfers.

--[[
-- Topics to follow are passed in argument and many can be provided

 	Selenites/MQTT_bridge.sel TeleInfo/Production/values/PAPP TeleInfo/Consommation/values/PAPP

-- wildcard are accepted as well

	Selenites/MQTT_bridge.sel TeleInfo/+/values/PAPP

--]]

assert( SELENE_VERSION >= 3.2100, "Arguments are supported starting Selene 3.21 only")

-- Helpers
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

-- Source broker
BrkS, err = SelMQTT.Connect( "tcp://bPI.chez.moi:1883", { reliable=false, clientID='MQTTBridge' } )
if not BrkS then
	print( err )
	return
end

-- Destination broker
BrkD, err = SelMQTT.Connect( "tcp://localhost:1883", { reliable=false, clientID='MQTTBridge' } )
if not BrkD then
	print( err )
	return
end

-- Reading arguments
if not arg then
	print("Syntaxe : " .. SELENE_SCRIPT_NAME .." topic_to_follow [...]")
	os.exit(1)
end

-- The bad solution : This version can't work because BrkD is not
-- accessible in a slave thread.
--[[
function forward(topic, msg)
	print("Forwarding t:'" .. topic .."' m:'".. msg .."'")
	BrkD:Publish( topic, msg, false )
end
]]

-- The good solution using fifo
local msgintransit = SelFIFO.Create('messages')

function forward()
	while true do
		local t,f = msgintransit:Pop()
		if not t then break end

		local topic, msg = string.match(t, "(.*)\b(.*)")
		print("Forwarding ", 't:"'..topic..'"', 'm:"'..msg..'"')
		BrkD:Publish( topic, msg, false)
	end
end

function store(topic, msg)
--	print("keeping t:'" .. topic .."' m:'".. msg .."'")
	local fifo = SelFIFO.Find('messages')
	SelFIFO.Push2FIFO(fifo, topic ..'\b' .. msg)

	return true
end

local subtable = {}
for _,topic in pairs(arg) do
	print(_,topic)
	table.insert( subtable, { topic=topic, func=store, trigger=forward, trigger_once=true } )
end

_, err = BrkS:Subscribe( subtable )

while true do
	local rt = table.pack( Selene.WaitFor() )
	for _,ret in ipairs(rt) do
		if type(ret) == 'function' then
			ret()
		end
	end
end

