#!./Selene

-- Tasks/Todo list example

-- Tasks are part of SelScripting module which is included by
-- default in Séléné. Consequently, no need to explicitly "Selene.Use()" it.

-- Tasks' definition
-- Tasks are launched sequentially so they are expected to be as fast as
-- possible and definitively not blocking

-- See also RegisteredFunction.sel

function test()
	print("test()")
end

function test2()
	print("test2()")
end

	-- Pushing
	-- functions are identified by unique identifiers
print ( Selene.PushTask( test ) )
print ( Selene.PushTask( test2 ) )

print( "Initial todo list\n---------------" )
Selene.dumpToDoList()

print( "\n\nTesting unnamed function\n---------------" )
print ( Selene.PushTask( function () print'toto' end ) )
Selene.dumpToDoList()

print( "\n\nPushing again 'test' a second time \n---------------" )
print ( Selene.PushTask( test ) )
Selene.dumpToDoList()	-- appears only once as it's the default value

print( "\n\nPushing again 'test' - ONCE\n---------------" )
print ( Selene.PushTask( test, Selene.TaskOnceConst("ONCE")) )
Selene.dumpToDoList()	-- Already in the todo list, not added

print( "\n\nPushing again 'test' - MULTIPLE\n---------------" )
print ( Selene.PushTask( test, Selene.TaskOnceConst("MULTIPLE")) )
Selene.dumpToDoList()	-- 'test' appears twice

print( "\n\nPushing again 'test' - LAST\n---------------" )
print ( Selene.PushTask( test, Selene.TaskOnceConst("LAST")) )
Selene.dumpToDoList()	-- Remove previous reference and appends 'test'


print( "\n\nExecuting the todo list\n---------------" )

if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

while true do
	local rt = table.pack( Selene.WaitFor() )
	if rt.n == 0 then	-- An error occured
		print "An error occured : see log"
		return;
	end

	for _,ret in ipairs(rt) do
		if type(ret) == 'function' then
			ret()
		else
			print("Don't know what to do with", type(ret))
		end
	end
end
