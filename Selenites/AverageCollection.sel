#!./Selene
-- AverageCollection example
-- The collection stores 2 sub collections
-- 	- immediate (real time) data
-- 	- average containing the average of immediate data grouped

Selene.Use("SelAverageCollection")
Selene.Use("SelMultitasking")	-- for detached tasks test
Selene.LetsGo()	-- ensure late building dependencies

-- create a collection
-- 5 entries for immediate data
-- 7 entries for average statistics grouped by 3 entries
col = SelAverageCollection.Create("simple", 5,7,3)

col:dump()

for i=1,4 do
	col:Push(i)
end
print( "Size : ", col:GetSize() )
print( "HowMany : ", col:HowMany() )
col:dump()

print("\n\nAdditional values that eject first ones")
print("---------------------------------------\n")

for i=5,7 do
	col:Push(i)
end
col:dump()

print( "Immediate MinMax", col:MinMaxI() )
print( "Average MinMax", col:MinMaxA() )
print( "Overal MinMax", col:MinMax() )

print("\n\niData()")
print("-------\n")

for d in col:iData() do print(d) end

print("\n\naData()")
print("-------\n")

for d in col:aData() do print(d) end

print "\n\nSave data"
print("----------\n")

col:Save('/tmp/ACol.dt', false)

print("\n\nReplace with randoms")
print("--------------------\n")

for i=1,9 do
	col:Push( math.random(0,1000) )
end
col:dump()

print("\n\nFill average with randoms")
print("-------------------------\n")

for i=1,15 do
	col:Push( math.random(0,1000) )
end
col:dump()

print( "Immediate MinMax", col:MinMaxI() )
print( "Average MinMax", col:MinMaxA() )
print( "Overal MinMax", col:MinMax() )

print( "Size : ", col:GetSize() )
print( "HowMany : ", col:HowMany() )

print("\n\nClearing the collection")
print("-----------------------\n")

col:Clear()
col:dump()

print "\n\nLoad data"
print("----------\n")

col:Load('/tmp/ACol.dt')
col:dump()

print "\n\nFind"
print("----\n")

	-- Find an existing collection
local colf = SelAverageCollection.Find("simple")
if colf then
	SelLog.Log("Find() Existing succeed")
else
	SelLog.Log('E', "Find() Existing failed")
end

colf = SelAverageCollection.Find("Non existant")
if not colf then
	SelLog.Log("Find() Non existing succeed")
else
	SelLog.Log('E', "Find() Non existing failed")
end

	-- Test multitasking
-- This detached function is able find the collection and add a value
function test()
	local detcol = SelAverageCollection.Find("simple")
	if detcol then
		SelLog.Log('I', "Pushing PI from detached function")
		detcol:Push(math.pi)
	else
		SelLog.Log('E', "Find() failed in detached function")
	end
end

Selene.Detach(test)
Selene.Sleep(0.25) -- Let some time for the function to run

col:dump()
