#!./Selene 
--- Blit an image in several ways

Selene.Use("SelDRMCairo")
Selene.LetsGo() -- ensure late building dependencies

	-- Open default card.
	-- As no argument is passed it's the default one
	-- /dev/dri/card0
function file_exists(name)
        local f=io.open(name,"r")
        if f~=nil then io.close(f) return true else return false end
end

card,err,msg = SelDCCard.Open()
if not card then
        print("*E* DRM :", err,msg)
        if SELPLUG_DRMCairo_FBEXTENSION then
                local fb_fch = "/dev/fb1"
                if not file_exists(fb_fch) then
                        fb_fch = "/dev/fb0"
                end
                card,err,msg = SelDCCard.OpenFB(fb_fch)
                if not card then
                        print("*E* ".. fb_fch .." :", err,msg)
                        os.exit()
                else
                        print("*I* ok with Framebuffer")
                end
        else
                os.exit()
        end
end

local srf = card:GetPrimarySurface()
local w,h = srf:GetSize()	-- Retrieve its size
srf:Clear( 0,0,0 )	-- 100% black and no transparency

----------------------------

print "Loading PNG image"

local img,err = SelDCSurfaceImage.createFromPNG("../HomeDashboard/SeleniteDFB/Images/Poseidon.png")
if not img then
	print("*E*",err)
	os.exit(EXIT_FAILURE)
end

print("Image size = ", img:GetSize())

-- Bliting original image
srf:Blit(img, 200,0)

-- another time to test transparency
srf:Blit(img, 70,100)

-- From the bottom right
local wimg,himg = img:GetSize()
srf:SetColor(1,0,0)
srf:Blit(img, 300,350, wimg/2, himg/2 )
srf:DrawRectangle(300,350, wimg/2, himg/2)

-- From the top left
srf:SetColor(0,1,0)
srf:Blit(img, 500,350, 0,0, wimg/2, himg/2 )
srf:DrawRectangle(500,350, wimg/2, himg/2)

-- From the middle
srf:SetColor(0,0,1)
srf:Blit(img, 700,350, wimg/4, himg/4, wimg/2, himg/2)
srf:DrawRectangle(500,350, wimg/2, himg/2)

	-- If you want to scale a surface, you have to apply the Scale
	-- to the TARGET, the source remain unchanged
srf:Scale(0.25, 0.15)
srf:Blit(img, 450,150)

img:Release()
----------------------------

fch,err,msg = srf:Dump("/tmp","Image")
if not fch then	-- An error happened
	print("Can't dump", err, msg);
else
	print("Dumped to", fch);
end

print "Hit 'enter' key to exit"
io.stdin:read'*l'	-- wait for enter
	---
	-- cleanup
	---

srf:Release()
card:Release()

