#!./Selene 
-- Event notification example (using timers and MQTT)

-- Callbacks
function bip_timer()
	print 'bip'
end

function bip_timer2()
	print 'bip2'
end

function handle_tata( topic, msg )
	print("Lua received t:'" .. topic .."' m:'".. msg .."'");
	SelShared.Set('tata', msg)
	return true
end

function handle_toto( topic, msg )
	print("Lua received t:'" .. topic .."' m:'".. msg .."'");
	SelShared.Set('toto', msg)
	return true
end

-- Update functions
function update_tata()
	print("update_tata()")
end

function update_toto()
	print("update_toto()")
	print( "toto='".. SelShared.Get("toto") .."'" )
end

-- Connection, subscription and finally waiting for messages
Brk, err = SelMQTT.Connect( "tcp://localhost:1883", { reliable=false  } )
if not Brk then
	print( err )
	return
end

_, err = Brk:Subscribe( { 
	{ topic = "tata/+/truc", func=handle_tata, trigger=update_tata, trigger_once=false, qos=SelMQTT.QoSConst("QoS0") },
	{ topic = "toto",func=handle_toto, trigger=update_toto, trigger_once=true } 
} )
if err then
	print( err )
	return
end

-- Create a timer with immediate function
itmr, err = SelTimer.Create { when=3.5, interval=2, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), ifunc=bip_timer }
if err then
	print(err)
	return
end

-- Another one with a task
ttmr, err = SelTimer.Create { when=7, interval=3.5, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), task=bip_timer2, once=true }
if err then
	print(err)
	return
end

-- Wait for events
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

while true do
	local rt = table.pack( Selene.WaitFor(itmr, ttmr, io.stdin) )
	for _,ret in ipairs(rt) do
		if type(ret) == 'function' then
			ret()
		elseif ret == io.stdin then
			print('reading from stdin')
			local l = io.read()
			if l == nil then break end
		end
	end
end
