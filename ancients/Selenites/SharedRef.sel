-- Simple MQTT receiving test that launch a referenced function

--	Compatibility with newer Lua
unpack = unpack or table.unpack
if not table.pack then
    function table.pack (...)
        return {n=select('#',...); ...}
    end
end

print '\nReferenting'
print '------------'

function tst()
	print "Referenced function"
end

local ref = SelShared.RegisterFunction(tst)	-- get function reference
SelShared.RegisterRef( ref, "TestFunc" ) -- register it

SelShared.dump()

print '\nBroker connection'
print '------------------'

-- Connection, subscription and finally waiting for messages
Brk, err = SelMQTT.Connect( "tcp://localhost:1883", { reliable=false  } )
if not Brk then
	print( err )
	return
end

print '\nSubscribing'
print '------------'

function toto(topic, message)
	print("Function toto :", message)
	local ref = SelShared.FindRef("TestFunc")
	SelShared.PushTaskByRef(ref)
	return true
end

function trig_toto()
	print("Trigger toto")
end

_, err = Brk:Subscribe( { 
	{ topic = "toto", func=toto, trigger=trig_toto, trigger_once=true } 
} )
if err then
	print( err )
	return
end

print '\nWaiting for data'
print '-----------------'

while true do
	local rt = table.pack( Selene.WaitFor() )
	for _,ret in ipairs(rt) do
		if type(ret) == 'function' then
			ret()
		end
	end
end
